/** * This program is a rudimentary demonstration of Swing GUI programming. * Note, the default layout manager for JFrames is the border layout. This * enables us to position containers using the coordinates South and Center. * * Usage: *	java ChatScreen * * When the user enters text in the textfield, it is displayed backwards  * in the display area. */import java.awt.*;import java.awt.event.*;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintStream;import java.net.Socket;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.concurrent.Executor;import java.util.concurrent.Executors;import javax.swing.*;import javax.swing.border.*;public class Client extends JFrame implements ActionListener, KeyListener{	private static JButton sendButton;	private static JButton exitButton;	private static JTextField sendText;	private static JTextArea displayArea;	public static boolean loggedIn;	private static Socket server;	private static BufferedReader serverInput;	private static PrintStream serverOutput;	private static String username;	public static List<String> userList;	private static final Executor exec = Executors.newCachedThreadPool();	public Client() {		/**		 * a panel used for placing components		 */		JPanel p = new JPanel();		Border etched = BorderFactory.createEtchedBorder();		Border titled = BorderFactory.createTitledBorder(etched, "Enter Message Here ...");		p.setBorder(titled);		/**		 * set up all the components		 */		sendText = new JTextField(30);		sendButton = new JButton("Send");		exitButton = new JButton("Exit");		/**		 * register the listeners for the different button clicks		 */		sendText.addKeyListener(this);		sendButton.addActionListener(this);		exitButton.addActionListener(this);		/**		 * add the components to the panel		 */		p.add(sendText);		p.add(sendButton);		p.add(exitButton);		/**		 * add the panel to the "south" end of the container		 */		getContentPane().add(p,"South");		/**		 * add the text area for displaying output. Associate		 * a scrollbar with this text area. Note we add the scrollpane		 * to the container, not the text area		 */		displayArea = new JTextArea(15,40);		displayArea.setEditable(false);		displayArea.setFont(new Font("SansSerif", Font.PLAIN, 14));		JScrollPane scrollPane = new JScrollPane(displayArea);		getContentPane().add(scrollPane,"Center");		/**		 * set the title and size of the frame		 */		setTitle("GUI Demo");		pack();		setVisible(true);		sendText.requestFocus();		/** anonymous inner class to handle window closing events */		addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent evt) {				System.exit(0);			}		} );	}	/**	 * This gets the text the user entered and outputs it	 * in the display area.	 * @throws Exception 	 */	public static void displayText(String message){		displayArea.append(message+"\n");		sendText.setText("");		sendText.requestFocus();	}	/**	 * This method responds to action events .... i.e. button clicks	 * and fulfills the contract of the ActionListener interface.	 */	public void actionPerformed(ActionEvent evt) {		Object source = evt.getSource();		if (source == sendButton){			if(loggedIn == false)				try {					logIn(sendText.getText());				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			else				toServer(sendText.getText());		}else if (source == exitButton){			serverOutput.println("7/r/n");			serverOutput.flush();			try {				server.close();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			System.exit(0);		}				}	public void logIn(String testName) throws IOException {		server = new Socket("localhost", 1337);		serverInput = new BufferedReader(new InputStreamReader(server.getInputStream()));		serverOutput = new PrintStream(new BufferedOutputStream(server.getOutputStream()));		serverOutput.println("0 "+testName+"/r/n");		serverOutput.flush();		String response = serverInput.readLine();				System.out.println(response);				String[] parse = response.split(" ", 2);		String[] parseUL = parse[1].split("]");				String uList = parseUL[0];		System.out.println(Arrays.toString(parse));				if(parse[0].equals("1")){			uList = uList.replace("[", "");			uList = uList.replace("]", "");			userList = new ArrayList<String>(Arrays.asList(uList.split(",")));			username = testName;			loggedIn = true;			String welcome1 = parseUL[1].replace("/r/n", "");			displayText(welcome1);			Runnable task = new ServerConnection();			exec.execute(task);		}else{			displayText("Username rejected, try again");			serverInput.close();			serverOutput.close();			server.close();		}	}	private void toServer(String message) {		if(message.charAt(0) == '/'){			char command = message.charAt(1);			switch(command){			case 'w':				String[] parsed = message.split(" ", 3);				if(userList.contains(parsed[1]) == true){					displayText("To "+parsed[1]+": "+parsed[2]);					serverOutput.println("4 "+username+" "+parsed[1]+" "+parsed[2]+"/r/n");					serverOutput.flush();				}				else{					displayText("User not found");				}				break;			case 'u':				displayText("Current users: "+userList.toString());				break;			case 'd':				serverOutput.println("7/r/n");				serverOutput.flush();				System.exit(0);				break;			case 'h':				displayText("To private message: /w <username> <message>");				displayText("For current users: /u");				displayText("To disconnect: /d");				break;			}		}		else{			serverOutput.println("3 "+message);			serverOutput.flush();		}	}	/**	 * These methods responds to keystroke events and fulfills	 * the contract of the KeyListener interface.	 */	/**	 * This is invoked when the user presses	 * the ENTER key.	 */	public void keyPressed(KeyEvent e) { 		if (e.getKeyCode() == KeyEvent.VK_ENTER)			if(loggedIn == false){				try {					logIn(sendText.getText());				} catch (Exception e1) {					// TODO Auto-generated catch block					e1.printStackTrace();				}			}else{				try {					toServer(sendText.getText());				} catch (Exception e1) {					// TODO Auto-generated catch block					e1.printStackTrace();				}			}	}	/** Not implemented */	public void keyReleased(KeyEvent e) { }	/** Not implemented */	public void keyTyped(KeyEvent e) {  }	public static void main(String[] args){		JFrame win = new Client();		loggedIn = false;		displayText("Enter Username");	}	protected static class ServerConnection implements Runnable {		public void run() { 			while(server != null){				try{					System.out.println("Running");					String inputLine = serverInput.readLine();					String [] commands = inputLine.split(" ");					int cmd = 0;					String[] parse;					//Get command number					System.out.println("Split command: " + Arrays.toString(commands));					//if commands[0] is number					if(commands[0].matches("[0-9]+")){						cmd = Integer.parseInt(commands[0]);						//if commands[0] is exit (7)						}else if(commands[0].matches("8/r/n")){						String stripped = commands[0].replace("/r/n", "");						cmd = Integer.parseInt(stripped);					}else{						throw new Exception("Server command is not recognized.\n");					}					switch(cmd){					case 5: //public msg						parse = inputLine.split(" ", 4);						displayText(parse[1] + " " + parse[2] + ": " + parse[3]);						break;					case 6: //private msg						parse = inputLine.split(" ", 5);						String msg1 = parse[4].replace("/r/n", "");						displayText("From " +parse[1] + " " + parse[3] + ": " + msg1);						break;					case 8: //goodbye msg						displayText("Goodbye!");						try {							serverInput.close();							serverInput.close();							server.close();						} catch (IOException e) {							// TODO Auto-generated catch block							e.printStackTrace();						}						break;					case 9: //user has disconnected						parse = inputLine.split(" ", 2);						String parsed1 = parse[1].replace("/r/n", ""); 						displayText(parsed1 + " disconnected :(");						userList.remove(parsed1);						break;					case 10: //user has connected\						parse = inputLine.split(" ", 2);						String parsed = parse[1].replace("/r/n", "");						displayText(parsed + " connected :)");						userList.add(parsed);						break;					}//end of switch				}catch (Exception e) {					// TODO Auto-generated catch block					e.printStackTrace();					System.exit(0);				}			}//end of while		}	}}